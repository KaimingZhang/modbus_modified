libmc(7)
============


NAME
----
libmc - a fast and portable Mc library


SYNOPSIS
--------
*#include <mc.h>*

*cc* \`pkg-config --cflags --libs libmc` 'files'


DESCRIPTION
-----------
libmc is a library to send/receive data with a device which respects the
Mc protocol. This library contains various backends to communicate over
different networks (eg. serial in RTU mode or Ethernet in TCP/IPv6). The
http://www.mc.org site provides documentation about the protocol at
http://www.mc.org/specs.php.

libmc provides an abstraction of the lower communication layers and offers
the same API on all supported platforms.

This documentation presents an overview of libmc concepts, describes how
libmc abstracts Mc communication with different hardware and platforms
and provides a reference manual for the functions provided by the libmc
library.


Contexts
~~~~~~~~
The Mc protocol contains many variants (eg. serial RTU or Ehternet TCP), to
ease the implementation of a variant, the library was designed to use a backend
for each variant. The backends are also a convenient way to fulfill other
requirements (eg. real-time operations). Each backend offers a specific function
to create a new 'mc_t' context. The 'mc_t' context is an opaque
structure containing all necessary information to establish a connection with
others Mc devices according to the selected variant.

You can choose the best context for your needs among:

RTU Context
^^^^^^^^^^^
The RTU backend (Remote Terminal Unit) is used in serial communication and makes
use of a compact, binary representation of the data for protocol
communication. The RTU format follows the commands/data with a cyclic redundancy
check checksum as an error check mechanism to ensure the reliability of
data. Mc RTU is the most common implementation available for Mc. A
Mc RTU message must be transmitted continuously without inter-character
hesitations (extract from Wikipedia, Mc, http://en.wikipedia.org/wiki/Mc
(as of Mar. 13, 2011, 20:51 GMT).

The Mc RTU framing calls a slave, a device/service which handle Mc
requests, and a master, a client which send requests. The communication is
always initiated by the master.

Many Mc devices can be connected together on the same physical link so you
need to define which slave is concerned by the message with
linkmb:mc_set_slave[3]. If you're running a slave, the slave number
is used to filter messages.

Create a Mc RTU context::
    linkmb:mc_new_rtu[3]


Set the serial mode::
    linkmb:mc_rtu_get_serial_mode[3]
    linkmb:mc_rtu_set_serial_mode[3]


TCP (IPv4) Context
^^^^^^^^^^^^^^^^^^
The TCP backend implements a Mc variant used for communications over
TCP/IPv4 networks. It does not require a checksum calculation as lower layer
takes care of the same.

Create a Mc TCP context::
    linkmb:mc_new_tcp[3]


TCP PI (IPv4 and IPv6) Context
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The TCP PI (Protocol Indepedent) backend implements a Mc variant used for
communications over TCP IPv4 and IPv6 networks. It does not require a checksum
calculation as lower layer takes care of the same.

Contrary to the TCP IPv4 only backend, the TCP PI backend offers hostname
resolution but it consumes about 1Kb of additional memory.

Create a Mc TCP context::
    linkmb:mc_new_tcp_pi[3]


Common
^^^^^^
Before using any libmc functions, the caller must allocate and initialize a
'mc_t' context with functions explained above, then the following functions
are provided to modify and free a 'context':

Free libmc context::
    linkmb:mc_free[3]

Context setters and getters::
    linkmb:mc_get_byte_timeout[3]
    linkmb:mc_set_byte_timeout[3]
    linkmb:mc_set_debug[3]
    linkmb:mc_set_error_recovery[3]
    linkmb:mc_get_header_length[3]
    linkmb:mc_get_response_timeout[3]
    linkmb:mc_set_response_timeout[3]
    linkmb:mc_set_slave[3]
    linkmb:mc_set_socket[3]
    linkmb:mc_get_socket[3]

A libmc 'context' is thread safe and may be shared among as many application
threads as necessary, without any additional locking required on the part of the
caller.

Macros for data manipulation::
    MC_GET_HIGH_BYTE(data), extracts the high byte from a byte
    MC_GET_LOW_BYTE(data), extracts the low byte from a byte
    MC_GET_INT32_FROM_INT16(tab_int16, index), builds an int32 from the two
    first int16 starting at tab_int16[index]
    MC_GET_INT16_FROM_INT8(tab_int8, index), builds an int16 from the two
    first int8 starting at tab_int8[index]
    MC_SET_INT16_TO_INT8(tab_int8, index, value), set an int16 value into
    the two first bytes starting at tab_int8[index]

Functions for data manipulation::
    linkmb:mc_set_bits_from_byte[3]
    linkmb:mc_set_bits_from_bytes[3]
    linkmb:mc_get_byte_from_bits[3]
    linkmb:mc_get_float[3]
    linkmb:mc_set_float[3]


Connection
~~~~~~~~~~
The following functions are provided to establish and close a connection with
Mc devices:

Establish a connection::
    linkmb:mc_connect[3]

Close a connection::
    linkmb:mc_close[3]

Flush a connection::
    linkmb:mc_flush[3]


Client
~~~~~~
The Mc protocol defines different data types and functions to read and write
them from/to remote devices. The following functions are used by the clients to
send Mc requests:

Read data::
     linkmb:mc_read_bits[3]
     linkmb:mc_read_input_bits[3]
     linkmb:mc_read_registers[3]
     linkmb:mc_read_input_registers[3]
     linkmb:mc_report_slave_id[3]

Write data::
     linkmb:mc_write_bit[3]
     linkmb:mc_write_register[3]
     linkmb:mc_write_bits[3]
     linkmb:mc_write_registers[3]

Write and read data::
      linkmb:mc_write_and_read_registers[3]

Raw requests::
    linkmb:mc_send_raw_request[3]
    linkmb:mc_receive_confirmation[3]

Reply an exception::
    linkmb:mc_reply_exception[3]


Server
~~~~~~
The server is waiting for request from clients and must answer when it is
concerned by the request. The libmc offers the following functions to
handle requests:

Data mapping:
     linkmb:mc_mapping_new[3]
     linkmb:mc_mapping_free[3]

Receive::
     linkmb:mc_receive[3]

Reply::
     linkmb:mc_reply[3]
     linkmb:mc_reply_exception[3]


ERROR HANDLING
--------------
The libmc functions handle errors using the standard conventions found on
POSIX systems. Generally, this means that upon failure a libmc function
shall return either a NULL value (if returning a pointer) or a negative value
(if returning an integer), and the actual error code shall be stored in the
'errno' variable.

The _mc_strerror()_ function is provided to translate libmc-specific
error codes into error message strings; for details refer to
linkmb:mc_strerror[3].


MISCELLANEOUS
-------------
The _LIBMC_VERSION_STRING_ constant indicates the libmc version the
program has been compiled against. The variables 'libmc_version_major',
'libmc_version_minor', 'libmc_version_micro' give the version the
program is linked against.


AUTHORS
-------
The libmc documentation was written by St√©phane Raimbault
<stephane.raimbault@gmail.com>


RESOURCES
---------
Main web site: <http://www.libmc.org/>

Report bugs on the issue tracker at
<http://github.com/stephane/libmc/issues>.


COPYING
-------
Free use of this software is granted under the terms of the GNU Lesser General
Public License (LGPL v2.1+). For details see the files `COPYING` and
`COPYING.LESSER` included with the libmc distribution.
